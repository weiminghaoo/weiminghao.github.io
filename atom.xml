<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://weiminghao.github.io</id>
    <title>潘潘家的小站</title>
    <updated>2019-10-31T08:38:46.132Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://weiminghao.github.io"/>
    <link rel="self" href="https://weiminghao.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://weiminghao.github.io/images/avatar.png</logo>
    <icon>https://weiminghao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 潘潘家的小站</rights>
    <entry>
        <title type="html"><![CDATA[ubuntu deepin-wine安装windows应用]]></title>
        <id>https://weiminghao.github.io/post/ubuntu-deepin-wine-an-zhuang-windows-ying-yong</id>
        <link href="https://weiminghao.github.io/post/ubuntu-deepin-wine-an-zhuang-windows-ying-yong">
        </link>
        <updated>2019-10-31T08:31:08.000Z</updated>
        <content type="html"><![CDATA[<h4 id="参考链接">参考链接</h4>
<p><a href="https://github.com/wszqkzqk/deepin-wine-ubuntu" title="deepin-wine-ubuntu">deepin-wine-ubuntu</a><br>
<a href="https://blog.csdn.net/qq_32767041/article/details/84558068" title="Ubuntu 安装 deepin wine 微信 登录后 有小黑框">Ubuntu 安装 deepin wine 微信 登录后 有小黑框</a></p>
<h4 id="正文">正文</h4>
<pre><code># 下载deepin-wine 环境
git clone https://github.com/wszqkzqk/deepin-wine-ubuntu.git
# 切换目录
cd deepin-wine-for-ubuntu
    ## 切换到root账户
    su 
    ./install.sh
    # OR
    ##sudo运行安装
    sudo ./install.sh
</code></pre>
<h4 id="正文-2">正文</h4>
<pre><code># 下载deepin-wine 环境
git clone https://github.com/wszqkzqk/deepin-wine-ubuntu.git
# 切换目录
cd deepin-wine-for-ubuntu
    ## 切换到root账户
    su 
    ./install.sh
    # OR
    ##sudo运行安装
    sudo ./install.sh
</code></pre>
<h5 id="以下下载链接摘自">以下下载链接摘自</h5>
<p><strong><a href="https://github.com/wszqkzqk/deepin-wine-ubuntu" target="_blank" rel="nofollow">deepin-wine-ubuntu</a></strong></p></p>
<ol>
<li><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/" target="_blank" rel="nofollow">QQ</a></li>
<li><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/" target="_blank" rel="nofollow">TIM</a></li>
<li><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/" target="_blank" rel="nofollow">QQ轻聊版</a></li>
<li><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/" target="_blank" rel="nofollow">微信</a></li>
<li><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/" target="_blank" rel="nofollow">Foxmail</a></li>
<li><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/" target="_blank" rel="nofollow">百度网盘</a></li>
<li><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/" target="_blank" rel="nofollow">360压缩</a></li>
<li><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.com.winrar/" target="_blank" rel="nofollow">WinRAR</a></li>
<li><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.thunderspeed/" target="_blank" rel="nofollow">迅雷极速版</a></li>
</ol>
<pre><code># 安装应用
## 安装需要超级用户权限
dpkg -i ***.deb
## 当然，你也可以双击 然后install
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot+Druid配置动态多数据源（注解切换）]]></title>
        <id>https://weiminghao.github.io/post/springbootdruid-pei-zhi-dong-tai-duo-shu-ju-yuan-zhu-jie-qie-huan</id>
        <link href="https://weiminghao.github.io/post/springbootdruid-pei-zhi-dong-tai-duo-shu-ju-yuan-zhu-jie-qie-huan">
        </link>
        <updated>2019-10-30T09:26:49.000Z</updated>
        <content type="html"><![CDATA[<p>yml配置文件:</p>
<pre><code>spring:
  datasource:
    druid:
      first:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/test1?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false
        username: root
        password: 123456
      second:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/test2?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false
        username: root
        password: 123456
      initial-size: 10
      max-active: 100
      min-idle: 10
      max-wait: 60000
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      #Oracle需要打开注释
      #validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        #login-username: admin
        #login-password: admin
      filter:
        stat:
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: false
        wall:
          config:
            multi-statement-allow: true
</code></pre>
<p>首先要将DataSourceAutoConfiguration给禁止掉：</p>
<pre><code class="language-java">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)
public class AdminApplication {
    public static void main(String[] args) {
        SpringApplication.run(AdminApplication.class, args);
    }
}
</code></pre>
<p>生成@DataSource注解,在service层中使用</p>
<pre><code class="language-java">package io.renren.zzrl_2019.datasources.annotation;
import java.lang.annotation.*;

/**
 * 多数据源注解
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface DataSource {
    String name() default &quot;&quot;;
}
</code></pre>
<p>自定义DataSourceNames：</p>
<pre><code class="language-java">package io.renren.zzrl_2019.datasources;

/**
 * 增加多数据源，在此配置
 */
public interface DataSourceNames {

    String FIRST = &quot;first&quot;;
    String SECOND = &quot;second&quot;;

}
</code></pre>
<p>自定义DynamicDataSourceConfig：</p>
<pre><code class="language-java">package io.renren.zzrl_2019.datasources;

import com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
 
import javax.sql.DataSource;
import java.util.HashMap;
import java.util.Map;
 
/**
 * 配置多数据源
 */
@Configuration
public class DynamicDataSourceConfig {
 
    @Bean
    @ConfigurationProperties(&quot;spring.datasource.druid.first&quot;)
    public DataSource firstDataSource(){
        return DruidDataSourceBuilder.create().build();
    }
 
    @Bean
    @ConfigurationProperties(&quot;spring.datasource.druid.second&quot;)
    public DataSource secondDataSource(){
        return DruidDataSourceBuilder.create().build();
    }
 
 
    @Bean
    @Primary
    public DynamicDataSource dataSource(DataSource firstDataSource, DataSource secondDataSource) {
        Map&lt;Object, Object&gt; targetDataSources = new HashMap&lt;&gt;();
        targetDataSources.put(DataSourceNames.FIRST, firstDataSource);
        targetDataSources.put(DataSourceNames.SECOND, secondDataSource);
        return new DynamicDataSource(firstDataSource, targetDataSources);
    }
}
</code></pre>
<p>自定义DynamicDataSource：</p>
<pre><code class="language-java">package io.renren.zzrl_2019.datasources;
 
import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;
 
import javax.sql.DataSource;
import java.util.Map;
 
/**
 * 动态数据源
 */
public class DynamicDataSource extends AbstractRoutingDataSource {
    private static final ThreadLocal&lt;String&gt; contextHolder = new ThreadLocal&lt;&gt;();
 
    public DynamicDataSource(DataSource defaultTargetDataSource, Map&lt;Object, Object&gt; targetDataSources) {
        super.setDefaultTargetDataSource(defaultTargetDataSource);
        super.setTargetDataSources(targetDataSources);
        super.afterPropertiesSet();
    }
 
    @Override
    protected Object determineCurrentLookupKey() {
        return getDataSource();
    }
 
    public static void setDataSource(String dataSource) {
        contextHolder.set(dataSource);
    }
 
    public static String getDataSource() {
        return contextHolder.get();
    }
 
    public static void clearDataSource() {
        contextHolder.remove();
    }
 
}
</code></pre>
<p>自定义DataSourceAspect：</p>
<pre><code class="language-java">package io.renren.zzrl_2019.datasources.aspect;
 
import io.renren.zzrl_2019.datasources.DataSourceNames;
import io.renren.zzrl_2019.datasources.DynamicDataSource;
import io.renren.zzrl_2019.datasources.annotation.DataSource;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.Ordered;
import org.springframework.stereotype.Component;
 
import java.lang.reflect.Method;
 
/**
 * 多数据源，切面处理类
 */
@Aspect
@Component
public class DataSourceAspect implements Ordered {
    protected Logger logger = LoggerFactory.getLogger(getClass());
 
    @Pointcut(&quot;@annotation(io.renren.zzrl_2019.datasources.annotation.DataSource)&quot;)
    public void dataSourcePointCut() {
 
    }
 
    @Around(&quot;dataSourcePointCut()&quot;)
    public Object around(ProceedingJoinPoint point) throws Throwable {
        MethodSignature signature = (MethodSignature) point.getSignature();
        Method method = signature.getMethod();
 
        DataSource ds = method.getAnnotation(DataSource.class);
        if(ds == null){
            DynamicDataSource.setDataSource(DataSourceNames.FIRST);
            logger.debug(&quot;set datasource is &quot; + DataSourceNames.FIRST);
        }else {
            DynamicDataSource.setDataSource(ds.name());
            logger.debug(&quot;set datasource is &quot; + ds.name());
        }
 
        try {
            return point.proceed();
        } finally {
            DynamicDataSource.clearDataSource();
            logger.debug(&quot;clean datasource&quot;);
        }
    }
 
    @Override
    public int getOrder() {
        return 1;
    }
}
</code></pre>
<p>Service层只需在方法上添加注解@DataSource(name = DataSourceNames.SECOND) 就行了，不添加默认使用第一个数据源</p>
<pre><code class="language-java"> @Override
    @DataSource(name = DataSourceNames.SECOND)
    public List&lt;Map&lt;String,Object&gt;&gt; dsjy() {
        return dxDao.dsjy();
    }
</code></pre>
<p>测试:成功返回另一个数据库中的内容。<br>
<img src="https://weiminghao.github.io/post-images/1572427650079.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端跨域解决方法之window.name+iframe]]></title>
        <id>https://weiminghao.github.io/post/qian-duan-kua-yu-jie-jue-fang-fa-zhi-windownameiframe</id>
        <link href="https://weiminghao.github.io/post/qian-duan-kua-yu-jie-jue-fang-fa-zhi-windownameiframe">
        </link>
        <updated>2019-10-30T08:05:37.000Z</updated>
        <content type="html"><![CDATA[<p>window.name 传输技术，原本是 Thomas Frank 用于解决 cookie 的一些劣势（每个域名 4 x 20 Kb 的限制、数据只能是字符串、设置和获取 cookie 语法的复杂等等）而发明的（详细见原文：《Session variables without cookies》），后来 Kris Zyp 在此方法的基础上强化了 window.name 传输 ，并引入到了 Dojo （dojox.io.windowName），用来解决跨域数据传输问题。</p>
<p>首先，我们要知道关于window.name的这样一个特性：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。换句话说，name属性不会因为页面的url变化而变化，这就给跨域提供了机会。</p>
<p>我们可以在源页面中利用iframe标签嵌套要请求的目标页面，在目标页面设置window.name属性，即把要请求的信息赋给window.name。但是问题来了，两个页面处于不同域，源页面并不能获得目标页面的name值，因为name值只对位于同一域中的页面是可见的。此时，我们需要将iframe导航回与源页面处于同一域中air.html页面（即一个空页面，在这里充当一个中转的角色），上面说了这时候的name值依旧保持不变，那么我们就可以获取到它了。</p>
<p>http://www.a.com/origin.html 如下</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
	&lt;title&gt;Document&lt;/title&gt;
	&lt;script&gt;
		function getData ( url, fn ) {
			var oIframe = document.createElement('iframe'),
				firstBtn = true,
				loadFn = function () {
					if ( firstBtn ) {
						//导航回同一域下的air.html，以便获取到name值
						oIframe.contentWindow.location = 'http://www.a.com/air.html';
						firstBtn = false;
					} else {
						fn( oIframe.contentWindow.name );
						oIframe.contentWindow.document.write('');
						oIframe.contentWindow.close();
						document.body.removeChild(oIframe);
						oIframe.src = '';
						oIframe = null;
					}
				};
 
			oIframe.src = url;
 
			//1.第一次iframe加载完毕触发事件，执行loadFn函数，会将iframe导航回air.html
			//2.air.html加载完毕后又会触发事件，再次执行loadFn函数，此时会走else
			if ( oIframe.attachEvent ) {
				oIframe.attachEvent( 'onload', loadFn );
			} else {
				oIframe.onload = loadFn;
			}
 
			document.body.appendChild(oIframe);
		}
 
 
		//页面加载完毕后调用getData函数去获取数据
		window.onload = function () {
			getData( 'http://www.b.com/target.html', function ( data ) {
				console.log( data );
			} );
		}
	&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>http://www.b.com/target.html如下：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;UTF-8&quot;&gt;
	&lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;script&gt;
		window.name = '想要获取的信息';
	&lt;/script&gt;
&lt;/body&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 一个静态博客写作客户端]]></title>
        <id>https://weiminghao.github.io/post/hello-gridea</id>
        <link href="https://weiminghao.github.io/post/hello-gridea">
        </link>
        <updated>2019-10-30T01:25:06.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>